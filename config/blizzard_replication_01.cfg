
## ---- tools ----

openfst_bindir = '/Users/owatts/tool/bin'    

## outputs will be put in subdirectories under here:
workdir = '/afs/inf.ed.ac.uk/group/cstr/projects/simple4all_2/oliver/slm_data_work/work/fls_bliz_replic'



## ----------- training data locations ---------

## original train data features, for join cost:
join_datadir = '/afs/inf.ed.ac.uk/group/cstr/projects/blizzard_entries/blizzard2017/parametric_synthesis/benchmark-merlin-data/feats/straight/'

## this is the training data as regenerated by LSTM trained on it (for target cost):
target_datadir = '/afs/inf.ed.ac.uk/group/cstr/projects/blizzard_entries/blizzard2017/hybrid_voice/data/predicted_params/train/' 
 
### 48k, mono, 16-bit wav-headered audio:
wav_datadir = '/afs/inf.ed.ac.uk/group/cstr/projects/blizzard_entries/blizzard2017/data/segmented/wav/'

### Reaper pitchmarks:
pm_datadir = '/afs/inf.ed.ac.uk/group/cstr/projects/blizzard_entries/blizzard2017/reaper_pm/world_reaper/pm/'

label_datadir = '/afs/inf.ed.ac.uk/group/cstr/projects/blizzard_entries/blizzard2017/parametric_synthesis/benchmark-merlin-data/labels/combilex/label_state_align/'



## ----------- synthesis data locations ---------


test_lab_dir = '/afs/inf.ed.ac.uk/group/cstr/projects/blizzard_entries/blizzard2017/parametric_synthesis/merlin/egs/fls_blizzard_2017/s1/experiments/fls_blizzard_full/test_synthesis/gen-lab-final/'
test_data_dir = '/afs/inf.ed.ac.uk/group/cstr/projects/blizzard_entries/blizzard2017/hybrid_voice/data/predicted_params/final_test/'
## this can be any filename substring, selecting a portion of the data ('hvd') or a single file ('AMidsummerNightsDream_001_016')
test_patterns = ['PirateAdventures_00001_00010']




## ------- data -----


## this can be an int to take the first n utterances, else a string to match
## the names of some utterances. 0 means take all.
n_train_utts = 0

## labels
lab_extension = 'lab'

## HTS style:
quinphone_regex = '([^~]+)~([^-]+)-([^\+]+)\+([^\=]+)\=([^:]+)'
## Ossian style
#quinphone_regex = '/1:([^/]+)/2:([^/]+)/3:([^/]+)/4:([^/]+)/5:([^/]+)' 


stream_list1 = ['mgc', 'bap', 'lf0']  ## these are names of subdirs and extensions. 
                                    ## Composition will happen in the order of this list.

datadims1 = {}
datadims1['bap'] = 25   
datadims1['mgc'] = 60
datadims1['lf0'] = 1
datadims1['vuv'] = 1



stream_list_target = stream_list1
stream_list_join = stream_list1

datadims_target = datadims1
datadims_join = datadims1


frameshift_ms = 5
sample_rate = 48000


## A peculiarity of the Blizzard regenerated data is that the end silences are stripped, replace them with zeros: 
untrim_silence_join_speech = False
untrim_silence_target_speech = True

### ----- standardisation and weighting -------

## First, data is standardised by the "train" script (per stream rather than 
## per coefficient) and stored to disk. 

standardise_target_data = True
standardise_join_data = True 
                 
## The "synth" script loads the standardised data and applies the following weights. 
## These weights are applied to the data before distances are computed, which is 
## equivalent to weighting the differences before squaring, but slightly more efficient
## and allows us to use KD tree implementations with only simple Euclidean distance.
## The weights used here would be squared if they were to be applied to the squared 
## difference term (as in the more standard formulation of weighted Euclidean distance)
## with the same effect.

weight_target_data = True
weight_join_data = True

feature_weights_target = [2.0] + [10.0]*12 + [0.0]*47 
feature_weights_target += [0.0] * datadims_target['bap']
feature_weights_target += [2.0]                            ## f0
feature_weights_target += [0.0]                           ## vuv

## For this example, use same weights for join and target costs:
feature_weights_join = feature_weights_target

feature_names_target = ['mcc%s'%(i) for i in xrange(datadims_target['mgc'])]
feature_names_target += ['bap%s'%(i) for i in xrange(datadims_target['bap'])]
feature_names_target += ['f0']                            ## f0
feature_names_target += ['vuv']                            ## vuv

feature_names_join = feature_names_target



kdt_implementation = 'stashable' #  'sklearn' # 'scipy' # 'sklearn'
target_metric = 'euclidean' # 'weighted_euclidean'
                                       
                   

### ----- join data -----

### This says to dump some data which can be used for learning a join cost with active learning
dump_join_data = True
join_cost_halfwidth = 5   ## consider this number of frames on each side of the join


                                    

## -------- synthesis --------

#synth_topdir = workdir + '/synthesis/'

## only for Blizzard replication -- substitute B_150 etc for pau:
suppress_weird_festival_pauses = True

n_test_utts = 100

debug_with_adjacent_frames = False # True

hold_waves_in_memory = False # True

n_candidates = 30 # 50 # 10 

join_cost_type = 'natural2' 

## overall scaling factor
join_cost_weight = 3.0

preselection_method =   'quinphone' # 'acoustic' #

## Waveforms are overlapped-and-added using a hanning window of length taper_length*2 samples
taper_length = 300

## Print some info for debugging synthesis:
get_selection_info = False




