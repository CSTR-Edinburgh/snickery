
## ----------- training data locations ---------


## outputs will be put in subdirectories under here:
workdir = SNICKERYWORKDIR

### 16k, mono, 16-bit wav-headered audio:
wav_datadir = WAV
data = FEATS

## original train data features, for join cost:
join_datadirs = [data + '/low/']

### Reaper pitchmarks:
pm_datadir = data + '/pm/'

## list of files to train on can optionally also be given in a list of basenames, for extra control:
train_list = TRAINLIST

label_datadir = ''

#target_datadirs = join_datadirs # faked (oracle) target
target_datadirs = [ TARGETDIR ]

store_full_magphase = False 
store_full_magphase_sep_files = True
full_magphase_dir = data + '/high/'


## ----------- synthesis data locations ---------

test_data_dirs = [ TARGETDIR ]
test_lab_dir = label_datadir
test_patterns = [ TESTPATTERN ]



## ------- data -----


## this can be an int to take the first n utterances, else a string to match
## the names of some utterances. 0 means take all.
n_train_utts = NUMTRAIN

datadims = {'lf0':1, 'mag': 60, 'real': 45, 'imag': 45}
stream_list_join = ['mag', 'real', 'imag', 'lf0']
datadims_join = datadims

stream_list_target = ['mag', 'lf0'] 
datadims_target = datadims

frameshift_ms = 5
sample_rate = 16000


# ## A peculiarity of the Blizzard regenerated data is that the end silences are stripped, replace them with zeros: 
# untrim_silence_join_speech = False
# untrim_silence_target_speech = False

# truncate_join_streams = [-1, -1, -1]
# truncate_target_streams = [-1, -1]



### ----- standardisation and weighting -------


## First, data is standardised by the "train" script (per stream rather than 
## per coefficient) and stored to disk. 

standardise_target_data = True
standardise_join_data = True 
                 
## The "synth" script loads the standardised data and applies the following weights. 
## These weights are applied to the data before distances are computed, which is 
## equivalent to weighting the differences before squaring, but slightly more efficient
## and allows us to use KD tree implementations with only simple Euclidean distance.
## The weights used here would be squared if they were to be applied to the squared 
## difference term (as in the more standard formulation of weighted Euclidean distance)
## with the same effect.

weight_target_data = True
weight_join_data = True

### --- stream-level weights

target_stream_weights = [1.0 / float(len(stream_list_target))]  *  len(stream_list_target)
join_stream_weights = [1.0 / float(len(stream_list_join))]  *  len(stream_list_join)

## overall scaling factor
join_cost_weight = JOINWEIGHT

target_representation = 'epoch' 



## -------- synthesis --------

n_test_utts = NUMTEST

greedy_search = True 

preload_all_magphase_utts = False 
hold_waves_in_memory = False # True


debug_with_adjacent_frames = False

search_epsilon = 10.0 # 'Return approximate nearest neighbors; the kth returned value is guaranteed to be no further than (1+eps) times the distance to the real kth nearest neighbor.'

multiepoch = NUMEPOCH 
magphase_overlap=2
last_frame_as_target=False
magphase_use_target_f0=True

## Print some info for debugging synthesis:
get_selection_info = False
