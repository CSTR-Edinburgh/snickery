
## ----------- training data locations ---------

REPLICATE_IS2018_EXP = False ## complete with bug (off-by-one when selecting hi-dim)...

## outputs will be put in subdirectories under here:
workdir = '/group/project/cstr2/owatts/blizz2018/snickery_voices3/'

### 48k, mono, 16-bit wav-headered audio:
wav_datadir = '/afs/inf.ed.ac.uk/group/cstr/projects/simple4all_2/oliver/data/nick/wav'

## original train data features, for join cost:
join_datadirs = ['/group/project/cstr2/owatts/blizz2018/features/magphase/low/']

## list of files to train on can optionally also be given in a list of basenames, for extra control:
train_list = '/afs/inf.ed.ac.uk/group/cstr/projects/blizzard_entries/blizzard2017/hybrid_voice/data/hybrid_voice_data/trim_lists/file_id_list_trim_by_1400.scp'

## faked (oracle) target:    
target_datadirs = ['/group/project/cstr2/owatts/blizz2018/features/natural_ps_targets/', '/group/project/cstr2/owatts/blizz2018/features/natural_lf0_only/']

store_full_magphase_sep_files = True    ## This really just means concatenate already extracted magphase frames
full_magphase_dir = '/group/project/cstr2/owatts/blizz2018/features/magphase/high/'
#use_hdf_magphase = data + '/nick_01.h5' ## This file made separately to train script


## ----------- synthesis data locations ---------

test_data_dirs = ['/afs/inf.ed.ac.uk/group/cstr/projects/blizzard_entries/blizzard2017/hybrid_voice/data/predicted_params/final_test/']
test_patterns = ['PercyAndThePirates']

## ------- data -----

## this can be an int to take the first n utterances, else a string to match
## the names of some utterances. 0 (default) means take all.
n_train_utts = 1000

datadims = {'lf0':1, 'mag': 60, 'real': 45, 'imag': 45, 'mgc': 60}

stream_list_join = ['mag', 'real', 'imag', 'lf0']
datadims_join = datadims

stream_list_target = ['mgc', 'lf0'] 
datadims_target = datadims

frameshift_ms = 5
sample_rate = 48000



### ----- standardisation and weighting -------


## First, data is standardised by the "train" script (per stream rather than 
## per coefficient) and stored to disk. 

#### ALWAYS DO THIS!
# standardise_target_data = True
# standardise_join_data = True 
                 
## The "synth" script loads the standardised data and applies the following weights. 
## These weights are applied to the data before distances are computed, which is 
## equivalent to weighting the differences before squaring, but slightly more efficient
## and allows us to use KD tree implementations with only simple Euclidean distance.
## The weights used here would be squared if they were to be applied to the squared 
## difference term (as in the more standard formulation of weighted Euclidean distance)
## with the same effect.

weight_target_data = True
weight_join_data = True

### --- stream-level weights

#target_stream_weights = [1.0 / float(len(stream_list_target))]  *  len(stream_list_target)
target_stream_weights = [0.7,0.3]
join_stream_weights = [1.0 / float(len(stream_list_join))]  *  len(stream_list_join)

target_representation = 'epoch' 


## -------- synthesis --------

n_test_utts = 5

pitch_synchronise_test_data = True

greedy_search = True 

preload_all_magphase_utts = False 
hold_waves_in_memory = False 


debug_with_adjacent_frames = False

search_epsilon = 10.0 # 'Return approximate nearest neighbors; the kth returned value is guaranteed to be no further than (1+eps) times the distance to the real kth nearest neighbor.'

multiepoch=4
magphase_overlap=2
last_frame_as_target=False
magphase_use_target_f0=True


truncate_target_streams = [-1,-1]
truncate_join_streams = [-1,-1,-1,-1]


## overall scaling factor
join_cost_weight = 0.3

## Print some info for debugging synthesis:
get_selection_info = False




             