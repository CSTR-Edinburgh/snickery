#!/usr/bin/env python
# -*- coding: utf-8 -*-
## Project: SCRIPT - March 2018 
## Contact: Oliver Watts - owatts@staffmail.ed.ac.uk


import sys, os
from string import strip
from argparse import ArgumentParser

def main_work():



    #################################################
      
    # ======== Get stuff from command line ==========

    a = ArgumentParser()
    a.add_argument('-o', dest='outfile', default='', type=str, \
                    help= "If not given, print to console")
    a.add_argument('-c', dest='clear', action='store_true', \
                    help= "clear any previous training data first")
    a.add_argument('-p', dest='max_cores', required=False, type=int, help="maximum number of CPU cores to use in parallel")
    opts = a.parse_args()
    
    # ===============================================
    
    for direc in [opts.outdir]:
        if not os.path.isdir(direc):
            os.makedirs(direc)







    #################################################

    # ======== Get stuff from command line ==========

    def usage():
        print "Usage: ......  "
        sys.exit(1)

    # e.g. 

    try:
        outfile = sys.argv[1]
        inputs = sys.argv[2:]
        
    except:
        usage()


    #################################################
    assert len(inputs) % 2 == 0

    names = []
    voice_dirs = []

    for i in range(0,len(inputs),2):
        name = inputs[i]
        voice_dir = inputs[i+1]
        names.append(name)
        voice_dirs.append(voice_dir)


    #################################################

    ### only keep utts appearing in all conditions
    uttnames=[]
    all_utts = []
    for voice_dir in voice_dirs:
        all_utts.extend(os.listdir(voice_dir))
    for unique_utt in set(all_utts):
        if all_utts.count(unique_utt) == len(names):
            uttnames.append(unique_utt)

    # for voice_dir in voice_dirs:
    #     for uttname in os.listdir(voice_dir):
    #             if uttname not in uttnames:
    #                     uttnames.append(uttname)
                    

    output = ''


    ## table top and toprow
    output += '<TABLE BORDER="1" CELLSPACING=2 CELLPADDING=7 WIDTH=1046 height="3">\n'
    output += '<!-- First (header) row -->\n'
    output += "<TR>\n"
    output += '<TD WIDTH="1" VALIGN="TOP" height="1"> <FONT FACE="Verdana" SIZE=2> <B><P ALIGN="CENTER">Condition</B></FONT> </TD>\n'
    for (name,voice_dir) in zip(names, voice_dirs):
            _, voice = os.path.split(voice_dir)
            output += voice


            output += '<TD WIDTH="1" VALIGN="TOP" height="1"><FONT FACE="Verdana" SIZE=2><B><P ALIGN="CENTER">%s</B></FONT> </TD>\n'%(name)
    output += '</TR>\n'
    
    for uttname in sorted(uttnames):
    
            output += "<TR>\n"        
            
            output += '<TD WIDTH="1" VALIGN="TOP" height="1"><FONT FACE="Verdana" SIZE=2><B><P ALIGN="CENTER">%s</B></FONT></TD>\n'%(uttname.replace(".wav", ""))
            for voice_dir in voice_dirs:

                wavename=os.path.join(voice_dir, uttname)
                output += '<TD WIDTH="1" VALIGN="TOP" height="1">\n'
                output += get_audio_control(wavename)

            output += "</TR>\n"                        
    output += '</table>\n'
    output += '<p>&nbsp;</p>\n'



    f = open(outfile, 'w')
    f.write(output)
    f.close()

def get_audio_control(fname):
    return '''<p><a onclick="this.firstChild.play()"><audio ><source src="%s"/></audio><img width="30" alt="" src="http://pngimg.com/uploads/ear/ear_PNG35710.png" height="30" /></a></p>\n'''%(fname)




if __name__=="__main__": 

        main_work()







